import { Collection, View } from "symposium";


import { Thumbnail } from "../models/thumbnail";
import { ThumbnailsPanelView, PagesPanelView } from "./panel/index";
import { CtxMenuView } from "./ctx_menu";
import { CtxMenu } from "../models/ctx_menu";
import {
    fetch_document,
    fetch_page_svg
} from "../requests";
import { default_actions } from "../default_actions";

import {
    EV_PANEL_ITEM_DBLCLICK,
    EV_PANEL_ITEM_CLICK,
    EV_ACTION_CLICKED
} from "../events";

class DocumentPanelView extends View {

    constructor(options={}) {

        super();
        this.thumbnails_col = new Collection();
        this.thumbnails_view = new ThumbnailsPanelView({
            collection: this.thumbnails_col,
            options: options['thumbnails']
        });

        this.pages_col = new Collection();
        this.pages_view = new PagesPanelView({
            collection: this.pages_col,
            options: options['pages']
        });

        this.ctx_menu_model = new CtxMenu();
        this.ctx_menu_view = new CtxMenuView({
            model: this.ctx_menu_model,
            options: options['ctx_menu']
        });
        this.options = options;

        this.pages_col.on("change:svg_image", this.on_svg_load, this);
        this.pages_col.on("reset", this.on_pages_reset, this);

        this.thumbnails_col.on("change", this.render_thumbnails_panel, this);
        this.ctx_menu_model.on("change", this.render_ctx_menu, this);
        // events generated by user
        this.thumbnails_view.on(EV_PANEL_ITEM_CLICK, this.on_thumbnail_clicked, this);
        this.thumbnails_view.on(EV_PANEL_ITEM_DBLCLICK, this.on_thumbnail_dblclicked, this);
        // this.panel_view.on(EV_DOCUMENT_CLICKED, this.document_clicked, this);
        // this.panel_view.on(EV_NODE_SELECTED, this.node_selected, this);
        // this.ctx_menu_view.on(EV_ACTION_CLICKED, this.action_clicked, this);

        this.ctx_menu_model.add(default_actions);
    }

    initial_fetch(doc) {
        let that = this;

        fetch_document(doc).then((pages) => {

            let new_thumb_col = new Collection();

            that.pages_col.reset(pages);
            new_thumb_col = pages.map((page) => {
                return new Thumbnail({
                    id: page.id,
                    page_num: page.page_num
                });
            });
            that.thumbnails_col.reset(new_thumb_col);
        }).catch((error) => {
            alert(`Error while fetching document '${doc}': ${error}`);
        });
    }

    on_svg_load(page) {
        console.log(`svg ready for page ${page}`);
        this.pages_view.render(page);
    }

    get_selection() {
        return this.thumbnails_col.filter(
            (page) => { return page.is_selected; }
        );
    }

    node_selected({node, selection}) {
        // this.trigger(EV_NODE_SELECTED, {node, selection});
        // this.ctx_menu_model.trigger(EV_NODE_SELECTED, {node, selection});
    }

    action_clicked(action) {
        action.run({
            selection: this.get_selection(),
            parent: this.get_parent()
        });
    }

    on_thumbnail_clicked(thumbnail) {
        //console.log(`on_thumbnail_clicked ${thumbnail}`);
    }

    on_thumbnail_dblclicked(thumbnail) {
        //console.log("on_thumbnail_dblclicked");
        this.pages_view.scroll_to(thumbnail.id);
    }

    start_folder_clicked_feedback() {
        /**
         * Provies folder click UI feedback.
         *
         * There might be (long) delays bewteen folder click event and
         * actual http server side response followed by changing of the folder
         * content. To provide user an immediate feedback, this function
         * performs following:
         *
         *  1. Marks current content of the folder (i.e. all nodes) as
         *   invisible. They are still present as model objects, but
         *   invisible in DOM (not visible, but still nodes take space).
         * This marking triggers a `change` event (which in turn
         * renders the panel view).
         *
         *  2. Displays a spinner.
         */
        this.panel_model.set_nodes_attr('visible', false);
        this.panel_view.show_loader();
    }

    stop_folder_clicked_feedback() {
        this.panel_view.hide_loader();
    }

    on_pages_reset() {
        this.pages_view.render();
        this.pages_col.forEach((page) => {
            fetch_page_svg(page);
        });
    }

    render_thumbnails_panel() {
        this.thumbnails_view.render();
    }

    render_ctx_menu() {
        this.ctx_menu_view.render();
    }

    reset(item_or_items) {
        this.panel_model.reset(item_or_items);
    }

}

export { DocumentPanelView };